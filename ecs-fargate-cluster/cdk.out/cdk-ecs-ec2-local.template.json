{
 "Description": "ECS ECS cluster, cluster name: cdk-ecs-ec2",
 "Resources": {
  "cluster611F8AFF": {
   "Type": "AWS::ECS::Cluster",
   "Properties": {
    "ClusterName": "cdk-ecs-ec2-local",
    "ClusterSettings": [
     {
      "Name": "containerInsights",
      "Value": "enabled"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/cluster/Resource"
   }
  },
  "clusterec2instanceInstanceSecurityGroup578A9F94": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "cdk-ecs-ec2-local/cluster/ec2-instance/InstanceSecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "cdk-ecs-ec2-local/cluster/ec2-instance"
     }
    ],
    "VpcId": "vpc-0214a44f164562327"
   },
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/cluster/ec2-instance/InstanceSecurityGroup/Resource"
   }
  },
  "clusterec2instanceInstanceRole68D49F48": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ec2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "cdk-ecs-ec2-local/cluster/ec2-instance"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/cluster/ec2-instance/InstanceRole/Resource"
   }
  },
  "clusterec2instanceInstanceRoleDefaultPolicy3B4FD846": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecs:DeregisterContainerInstance",
        "ecs:RegisterContainerInstance",
        "ecs:Submit*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "cluster611F8AFF",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ecs:Poll",
        "ecs:StartTelemetrySession"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "cluster611F8AFF",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecs:DiscoverPollEndpoint",
        "ecr:GetAuthorizationToken",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "clusterec2instanceInstanceRoleDefaultPolicy3B4FD846",
    "Roles": [
     {
      "Ref": "clusterec2instanceInstanceRole68D49F48"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/cluster/ec2-instance/InstanceRole/DefaultPolicy/Resource"
   }
  },
  "clusterec2instanceInstanceProfileE8CC4E1E": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "clusterec2instanceInstanceRole68D49F48"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/cluster/ec2-instance/InstanceProfile"
   }
  },
  "clusterec2instanceLaunchConfigC7E7C265": {
   "Type": "AWS::AutoScaling::LaunchConfiguration",
   "Properties": {
    "ImageId": {
     "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter"
    },
    "InstanceType": "c5.xlarge",
    "IamInstanceProfile": {
     "Ref": "clusterec2instanceInstanceProfileE8CC4E1E"
    },
    "SecurityGroups": [
     {
      "Fn::GetAtt": [
       "clusterec2instanceInstanceSecurityGroup578A9F94",
       "GroupId"
      ]
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\necho ECS_CLUSTER=",
        {
         "Ref": "cluster611F8AFF"
        },
        " >> /etc/ecs/ecs.config\nsudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP\nsudo service iptables save\necho ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config\necho ECS_CLUSTER=",
        {
         "Ref": "cluster611F8AFF"
        },
        " >> /etc/ecs/ecs.config\nsudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP\nsudo service iptables save\necho ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config"
       ]
      ]
     }
    }
   },
   "DependsOn": [
    "clusterec2instanceInstanceRoleDefaultPolicy3B4FD846",
    "clusterec2instanceInstanceRole68D49F48"
   ],
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/cluster/ec2-instance/LaunchConfig"
   }
  },
  "clusterec2instanceASGDFF9BA32": {
   "Type": "AWS::AutoScaling::AutoScalingGroup",
   "Properties": {
    "MaxSize": "10",
    "MinSize": "1",
    "Cooldown": "10",
    "LaunchConfigurationName": {
     "Ref": "clusterec2instanceLaunchConfigC7E7C265"
    },
    "NewInstancesProtectedFromScaleIn": true,
    "Tags": [
     {
      "Key": "Name",
      "PropagateAtLaunch": true,
      "Value": "cdk-ecs-ec2-local/cluster/ec2-instance"
     }
    ],
    "VPCZoneIdentifier": [
     "subnet-06c35fb30b6b551ca",
     "subnet-0e78260242d0f55d8",
     "subnet-0ab14bea82b92b5d6"
    ]
   },
   "UpdatePolicy": {
    "AutoScalingReplacingUpdate": {
     "WillReplace": true
    },
    "AutoScalingScheduledAction": {
     "IgnoreUnmodifiedGroupSizeProperties": true
    }
   },
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/cluster/ec2-instance/ASG"
   }
  },
  "clusterec2instanceDrainECSHookFunctionServiceRole771E0DA3": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "cdk-ecs-ec2-local/cluster/ec2-instance"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/cluster/ec2-instance/DrainECSHook/Function/ServiceRole/Resource"
   }
  },
  "clusterec2instanceDrainECSHookFunctionServiceRoleDefaultPolicy474EA901": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ec2:DescribeInstances",
        "ec2:DescribeInstanceAttribute",
        "ec2:DescribeInstanceStatus",
        "ec2:DescribeHosts"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "autoscaling:CompleteLifecycleAction",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":autoscaling:ap-northeast-2:681747700094:autoScalingGroup:*:autoScalingGroupName/",
          {
           "Ref": "clusterec2instanceASGDFF9BA32"
          }
         ]
        ]
       }
      },
      {
       "Action": [
        "ecs:DescribeContainerInstances",
        "ecs:DescribeTasks"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "cluster611F8AFF",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecs:ListContainerInstances",
        "ecs:SubmitContainerStateChange",
        "ecs:SubmitTaskStateChange"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "cluster611F8AFF",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ecs:UpdateContainerInstancesState",
        "ecs:ListTasks"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "cluster611F8AFF",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "clusterec2instanceDrainECSHookFunctionServiceRoleDefaultPolicy474EA901",
    "Roles": [
     {
      "Ref": "clusterec2instanceDrainECSHookFunctionServiceRole771E0DA3"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/cluster/ec2-instance/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "clusterec2instanceDrainECSHookFunction08590118": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "import boto3, json, os, time\n\necs = boto3.client('ecs')\nautoscaling = boto3.client('autoscaling')\n\n\ndef lambda_handler(event, context):\n  print(json.dumps(event))\n  cluster = os.environ['CLUSTER']\n  snsTopicArn = event['Records'][0]['Sns']['TopicArn']\n  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])\n  instance_id = lifecycle_event.get('EC2InstanceId')\n  if not instance_id:\n    print('Got event without EC2InstanceId: %s', json.dumps(event))\n    return\n\n  instance_arn = container_instance_arn(cluster, instance_id)\n  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))\n\n  if not instance_arn:\n    return\n\n  task_arns = container_instance_task_arns(cluster, instance_arn)\n  \n  if task_arns:\n    print('Instance ARN %s has task ARNs %s' % (instance_arn, ', '.join(task_arns)))\n\n  while has_tasks(cluster, instance_arn, task_arns):\n    time.sleep(10)\n\n  try:\n    print('Terminating instance %s' % instance_id)\n    autoscaling.complete_lifecycle_action(\n        LifecycleActionResult='CONTINUE',\n        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))\n  except Exception as e:\n    # Lifecycle action may have already completed.\n    print(str(e))\n\n\ndef container_instance_arn(cluster, instance_id):\n  \"\"\"Turn an instance ID into a container instance ARN.\"\"\"\n  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']\n  if not arns:\n    return None\n  return arns[0]\n\ndef container_instance_task_arns(cluster, instance_arn):\n  \"\"\"Fetch tasks for a container instance ARN.\"\"\"\n  arns = ecs.list_tasks(cluster=cluster, containerInstance=instance_arn)['taskArns']\n  return arns\n\ndef has_tasks(cluster, instance_arn, task_arns):\n  \"\"\"Return True if the instance is running tasks for the given cluster.\"\"\"\n  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']\n  if not instances:\n    return False\n  instance = instances[0]\n\n  if instance['status'] == 'ACTIVE':\n    # Start draining, then try again later\n    set_container_instance_to_draining(cluster, instance_arn)\n    return True\n\n  task_count = None\n\n  if task_arns:\n    # Fetch details for tasks running on the container instance\n    tasks = ecs.describe_tasks(cluster=cluster, tasks=task_arns)['tasks']\n    if tasks:\n      # Consider any non-stopped tasks as running\n      task_count = sum(task['lastStatus'] != 'STOPPED' for task in tasks) + instance['pendingTasksCount']\n  \n  if not task_count:\n    # Fallback to instance task counts if detailed task information is unavailable\n    task_count = instance['runningTasksCount'] + instance['pendingTasksCount']\n    \n  print('Instance %s has %s tasks' % (instance_arn, task_count))\n\n  return task_count > 0\n\ndef set_container_instance_to_draining(cluster, instance_arn):\n  ecs.update_container_instances_state(\n      cluster=cluster,\n      containerInstances=[instance_arn], status='DRAINING')\n\n\ndef pick(dct, *keys):\n  \"\"\"Pick a subset of a dict.\"\"\"\n  return {k: v for k, v in dct.items() if k in keys}\n"
    },
    "Role": {
     "Fn::GetAtt": [
      "clusterec2instanceDrainECSHookFunctionServiceRole771E0DA3",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "CLUSTER": {
       "Ref": "cluster611F8AFF"
      }
     }
    },
    "Handler": "index.lambda_handler",
    "Runtime": "python3.6",
    "Tags": [
     {
      "Key": "Name",
      "Value": "cdk-ecs-ec2-local/cluster/ec2-instance"
     }
    ],
    "Timeout": 310
   },
   "DependsOn": [
    "clusterec2instanceDrainECSHookFunctionServiceRoleDefaultPolicy474EA901",
    "clusterec2instanceDrainECSHookFunctionServiceRole771E0DA3"
   ],
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/cluster/ec2-instance/DrainECSHook/Function/Resource"
   }
  },
  "clusterec2instanceDrainECSHookFunctionAllowInvokecdkecsec2localclusterec2instanceLifecycleHookDrainHookTopic1B9ECFC524F7FD30": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "clusterec2instanceDrainECSHookFunction08590118",
      "Arn"
     ]
    },
    "Principal": "sns.amazonaws.com",
    "SourceArn": {
     "Ref": "clusterec2instanceLifecycleHookDrainHookTopicED3593A2"
    }
   },
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/cluster/ec2-instance/DrainECSHook/Function/AllowInvoke:cdkecsec2localclusterec2instanceLifecycleHookDrainHookTopic1B9ECFC5"
   }
  },
  "clusterec2instanceDrainECSHookFunctionTopicAF6AFC11": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Protocol": "lambda",
    "TopicArn": {
     "Ref": "clusterec2instanceLifecycleHookDrainHookTopicED3593A2"
    },
    "Endpoint": {
     "Fn::GetAtt": [
      "clusterec2instanceDrainECSHookFunction08590118",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/cluster/ec2-instance/DrainECSHook/Function/Topic/Resource"
   }
  },
  "clusterec2instanceLifecycleHookDrainHookTopicED3593A2": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "cdk-ecs-ec2-local/cluster/ec2-instance"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/cluster/ec2-instance/LifecycleHookDrainHook/Topic/Resource"
   }
  },
  "clusterec2instanceLifecycleHookDrainHookRole6468FE64": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "autoscaling.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "cdk-ecs-ec2-local/cluster/ec2-instance"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/cluster/ec2-instance/LifecycleHookDrainHook/Role/Resource"
   }
  },
  "clusterec2instanceLifecycleHookDrainHookRoleDefaultPolicy06D438BA": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Resource": {
        "Ref": "clusterec2instanceLifecycleHookDrainHookTopicED3593A2"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "clusterec2instanceLifecycleHookDrainHookRoleDefaultPolicy06D438BA",
    "Roles": [
     {
      "Ref": "clusterec2instanceLifecycleHookDrainHookRole6468FE64"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/cluster/ec2-instance/LifecycleHookDrainHook/Role/DefaultPolicy/Resource"
   }
  },
  "clusterec2instanceLifecycleHookDrainHookE450882C": {
   "Type": "AWS::AutoScaling::LifecycleHook",
   "Properties": {
    "AutoScalingGroupName": {
     "Ref": "clusterec2instanceASGDFF9BA32"
    },
    "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
    "DefaultResult": "CONTINUE",
    "HeartbeatTimeout": 300,
    "NotificationTargetARN": {
     "Ref": "clusterec2instanceLifecycleHookDrainHookTopicED3593A2"
    },
    "RoleARN": {
     "Fn::GetAtt": [
      "clusterec2instanceLifecycleHookDrainHookRole6468FE64",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "clusterec2instanceLifecycleHookDrainHookRoleDefaultPolicy06D438BA",
    "clusterec2instanceLifecycleHookDrainHookRole6468FE64"
   ],
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/cluster/ec2-instance/LifecycleHookDrainHook/Resource"
   }
  },
  "clusterA4C38409": {
   "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
   "Properties": {
    "CapacityProviders": [
     {
      "Ref": "asgcapacityprovider5CEB09E2"
     }
    ],
    "Cluster": {
     "Ref": "cluster611F8AFF"
    },
    "DefaultCapacityProviderStrategy": []
   },
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/cluster/cluster"
   }
  },
  "asgcapacityprovider5CEB09E2": {
   "Type": "AWS::ECS::CapacityProvider",
   "Properties": {
    "AutoScalingGroupProvider": {
     "AutoScalingGroupArn": {
      "Ref": "clusterec2instanceASGDFF9BA32"
     },
     "ManagedScaling": {
      "Status": "ENABLED",
      "TargetCapacity": 100
     },
     "ManagedTerminationProtection": "ENABLED"
    },
    "Name": "AsgCapacityProvider"
   },
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/asg-capacityprovider/asg-capacityprovider"
   }
  },
  "ssmclustercapacityprovidername6802207B": {
   "Type": "AWS::SSM::Parameter",
   "Properties": {
    "Type": "String",
    "Value": {
     "Ref": "asgcapacityprovider5CEB09E2"
    },
    "Name": "/cdk-ecs-ec2/cluster-capacityprovider-name"
   },
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/ssm-cluster-capacityprovider-name/Resource"
   }
  },
  "ssmclustersecuritygroupid06B5375F": {
   "Type": "AWS::SSM::Parameter",
   "Properties": {
    "Type": "String",
    "Value": {
     "Fn::Select": [
      0,
      [
       {
        "Fn::GetAtt": [
         "clusterec2instanceInstanceSecurityGroup578A9F94",
         "GroupId"
        ]
       }
      ]
     ]
    },
    "Name": "/cdk-ecs-ec2/cluster-securitygroup-id"
   },
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/ssm-cluster-securitygroup-id/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/2VSyW7CMBD9lt6NW1DbO4rURUJqBL1Xw2QCA44deWwqFPnf64SlLCe/92bxPI8nevKinx7gV0ZYbUeGl7pbBMCtmpO46JFUjv10hKK7wkQJ5FVR23tYQAvIYV96t+OK/FTEIUNgZ0VNZXUbH0pvtKQgBicIhu1Kd9NMFgfy7l1s+5IZRIvrwtmaV9EP7Xv5LnXGNeEeDX04tx0KL4WkCCfZKWH0+f5z9yshKYZGd3NnqI8NZ+kM476n/+jTSgCLlF3UbCgpA82yAt295VFPA17iknzDIpklJTY/7CIuBT23p4Qr/u1axl4dQK6Qpt+Rz1ZL8NDQcQ9nktIV7clXDG0Mg4vjWpOyriK9kcfd+FWPn/Mn2AjzyEcbuCE9P5x/xi/dVSACAAA="
   },
   "Metadata": {
    "aws:cdk:path": "cdk-ecs-ec2-local/CDKMetadata/Default"
   }
  }
 },
 "Parameters": {
  "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": {
   "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
   "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id"
  },
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Outputs": {
  "VPC": {
   "Value": "vpc-0214a44f164562327"
  },
  "EC2SecurityGroupID": {
   "Value": {
    "Fn::Select": [
     0,
     [
      {
       "Fn::GetAtt": [
        "clusterec2instanceInstanceSecurityGroup578A9F94",
        "GroupId"
       ]
      }
     ]
    ]
   }
  },
  "Cluster": {
   "Value": {
    "Ref": "cluster611F8AFF"
   }
  },
  "CapacityProvider": {
   "Value": {
    "Ref": "asgcapacityprovider5CEB09E2"
   }
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}